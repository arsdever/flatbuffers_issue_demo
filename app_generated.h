// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_APP_APP_H_
#define FLATBUFFERS_GENERATED_APP_APP_H_

#include "flatbuffers/flatbuffers.h"

namespace app {

struct App;
struct AppBuilder;

struct App FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef AppBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_VALUE = 4
  };
  uint8_t value() const {
    return GetField<uint8_t>(VT_VALUE, 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint8_t>(verifier, VT_VALUE, 1) &&
           verifier.EndTable();
  }
};

struct AppBuilder {
  typedef App Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_value(uint8_t value) {
    fbb_.AddElement<uint8_t>(App::VT_VALUE, value, 0);
  }
  explicit AppBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<App> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<App>(end);
    return o;
  }
};

inline flatbuffers::Offset<App> CreateApp(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint8_t value = 0) {
  AppBuilder builder_(_fbb);
  builder_.add_value(value);
  return builder_.Finish();
}

inline const app::App *GetApp(const void *buf) {
  return flatbuffers::GetRoot<app::App>(buf);
}

inline const app::App *GetSizePrefixedApp(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<app::App>(buf);
}

inline bool VerifyAppBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<app::App>(nullptr);
}

inline bool VerifySizePrefixedAppBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<app::App>(nullptr);
}

inline void FinishAppBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<app::App> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedAppBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<app::App> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace app

#endif  // FLATBUFFERS_GENERATED_APP_APP_H_
